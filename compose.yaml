name: online-rizz-shop
services:
  service-mongo:
    image: mongo:8.0.12-rc0-noble
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 20s
    ports:
      - "27018:27017"
    networks:
      - backend
    labels:
      kompose.node-selector: ors-data
      kompose.service.type: nodeport
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongodata:/data/db

  service-postgres:
    image: postgres:14.18-bookworm
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    networks:
      - backend
    labels:
      kompose.node-selector: ors-data
      kompose.service.type: nodeport
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgresdata:/var/lib/postgresql/data

  service-seeder:
    build:
      context: ./seeder/
    image: my-seeder
    depends_on:
      service-mongo:
        condition: service_healthy
      service-postgres:
        condition: service_healthy
    networks:
      - backend
    restart: "no"
    environment:
      MONGO_NEW_USERNAME: ${MONGO_NEW_USERNAME}
      MONGO_NEW_PASSWORD: ${MONGO_NEW_PASSWORD}
      MONGO_NEW_DB: ${MONGO_NEW_DB}
      MONGO_HOST: ${DOCKER_MONGO_HOST}
      MONGO_PORT: ${DOCKER_MONGO_PORT}
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      POSTGRES_HOST: ${DOCKER_POSTGRES_HOST}
      POSTGRES_PORT: ${DOCKER_POSTGRES_PORT}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

  service-rabbitmq:
    image: rabbitmq:4.1.2-management
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      kompose.node-selector: ors-data
      kompose.service.type: nodeport
    ports:
      - "5673:5672"
      - "15673:15672"
    networks:
      - backend
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq
  service-ms-queuehandler:
    build: 
      context: ./MicroServices/QueueHandler/
    image: my-queuehandler
    depends_on:
      service-rabbitmq:
        condition: service_healthy
        restart: true
    networks:
      - backend
    environment:
      RABBITMQ_HOST: ${DOCKER_RABBIT_HOST}
      RABBITMQ_PORT: ${DOCKER_RABBIT_PORT}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      POSTGRES_PORT: ${DOCKER_POSTGRES_PORT}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${DOCKER_POSTGRES_HOST}
    volumes:
      - queuehandler:/data/  

  service-api:
    build: 
      context: ./server/
    image: my-api
    depends_on:
      service-mongo:
        condition: service_started
        restart: true
      service-postgres:
        condition: service_started
      service-seeder:
        condition: service_completed_successfully
        restart: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    ports:
      - "3003:3003"
    networks:
      - backend
    environment:
        API_PORT: ${API_PORT}
        MONGO_HOST: ${DOCKER_MONGO_HOST}
        MONGO_PORT: ${DOCKER_MONGO_PORT}
        MONGO_USERNAME: ${MONGO_USERNAME}
        MONGO_PASSWORD: ${MONGO_PASSWORD}
        MONGO_NEW_USERNAME: ${MONGO_NEW_USERNAME}
        MONGO_NEW_PASSWORD: ${MONGO_NEW_PASSWORD}
        MONGO_NEW_DB: ${MONGO_NEW_DB}
        POSTGRES_HOST: ${DOCKER_POSTGRES_HOST}
        POSTGRES_PORT: ${DOCKER_POSTGRES_PORT}
        POSTGRES_USERNAME: ${POSTGRES_USERNAME}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
        RABBITMQ_HOST: ${DOCKER_RABBIT_HOST}
        RABBITMQ_PORT: ${DOCKER_RABBIT_PORT}
        RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
        RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
        CLIENT_HOST: ${CLIENT_HOST}
        CLIENT_PORT: ${VITE_CLIENT_PORT}
    volumes:
      - client-api:/data/

volumes:
  mongodata:
    driver: local
  postgresdata:
    driver: local
  rabbitmqdata:
    driver: local
  client-data:
    driver: local
  client-api:
    driver: local
  queuehandler:
    driver: local

networks:
  backend:
