name: online-rizz-shop
services:
  service-mongo:
    build: 
      context: ./docker/mongodb
    image: my-mongo
    pull_policy: never
    
    ports:
      - "27018:27017"
    networks:
      - backend
    labels:
      kompose.node-selector: ors-data
      kompose.service.type: nodeport
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongodata:/data/db
  
  service-postgres:
    build: 
      context: ./docker/postgres
    image: my-postgres
    pull_policy: never
    ports:
      - "5433:5432"
    networks:
      - backend
    labels:
      kompose.node-selector: ors-data
      kompose.service.type: nodeport
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgresdata:/var/lib/postgresql/data
  
  service-rabbitmq:
    build: 
      context: ./docker/rabbitmq
    image: my-rabbitmq
    pull_policy: never
    labels:
      kompose.node-selector: ors-data
      kompose.service.type: nodeport
    ports:
      - "5673:5672"
      - "15673:15672"
    networks:
      - backend
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq

  # service-seeder:
  #   build: 
  #     context: ./seeder/
  #   image: my-seeder
  #   depends_on:
  #     service-mongo:
  #       condition: service_started
  #       restart: true
  #     service-postgres:
  #       condition: service_started
  #       restart: true
  #   profiles:
  #     - manual
  #   pull_policy: never
  #   labels:
  #     kompose.node-selector: ors-data
  #     kompose.service.type: nodeport
  #   networks:
  #     - backend
  #   environment:
  #       MONGO_HOST: ${MONGO_HOST}
  #       MONGO_PORT: ${MONGO_PORT}
  #       MONGO_USERNAME: ${MONGO_USERNAME}
  #       MONGO_PASSWORD: ${MONGO_PASSWORD}
  #       MONGO_NEW_USERNAME: ${MONGO_NEW_USERNAME}
  #       MONGO_NEW_PASSWORD: ${MONGO_NEW_PASSWORD}
  #       MONGO_NEW_DB: ${MONGO_NEW_DB}
  #       POSTGRES_PORT: ${POSTGRES_PORT}
  #       POSTGRES_USERNAME: ${POSTGRES_USERNAME}
  #       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #       POSTGRES_DB: ${POSTGRES_DB}
  #       POSTGRES_HOST: ${POSTGRES_HOST}

  service-client:
    build: 
      context: ./client/
    image: my-client
    depends_on:
      service-ms-queuehandler:
        condition: service_started
        restart: true
    pull_policy: never
    ports:
      - "8083:80"
    networks:
      - backend
    environment:
      VITE_API_HOST: ${VITE_API_HOST}
      VITE_API_PORT: ${VITE_API_PORT}
    volumes:
      - client-data:/data/
  
  service-api:
    build: 
      context: ./server/
    image: my-api
    depends_on:
      service-mongo:
        condition: service_started
        restart: true
      service-postgres:
        condition: service_started
        restart: true
    pull_policy: never
    ports:
      - "3003:3003"
    networks:
      - backend
    environment:
        API_PORT: ${API_PORT}
        MONGO_HOST: ${MONGO_HOST}
        MONGO_PORT: ${MONGO_PORT}
        MONGO_USERNAME: ${MONGO_USERNAME}
        MONGO_PASSWORD: ${MONGO_PASSWORD}
        MONGO_NEW_USERNAME: ${MONGO_NEW_USERNAME}
        MONGO_NEW_PASSWORD: ${MONGO_NEW_PASSWORD}
        MONGO_NEW_DB: ${MONGO_NEW_DB}
        POSTGRES_HOST: ${POSTGRES_HOST}
        POSTGRES_PORT: ${POSTGRES_PORT}
        POSTGRES_USERNAME: ${POSTGRES_USERNAME}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
        RABBITMQ_HOST: ${RABBITMQ_HOST}
        RABBITMQ_PORT: ${RABBITMQ_PORT}
        RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
        RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
        CLIENT_HOST: ${CLIENT_HOST}
    volumes:
      - client-api:/data/
  
  service-ms-queuehandler:
    build: 
      context: ./MicroServices/QueueHandler/
    image: my-queuehandler
    depends_on:
      service-rabbitmq:
        condition: service_started
        restart: true
      service-api:
        condition: service_started
        restart: true
    pull_policy: never
    networks:
      - backend
    environment:
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - queuehandler:/data/  

volumes:
  mongodata:
    driver: local
  postgresdata:
    driver: local
  rabbitmqdata:
    driver: local
  client-data:
    driver: local
  client-api:
    driver: local
  queuehandler:
    driver: local

networks:
  backend:
